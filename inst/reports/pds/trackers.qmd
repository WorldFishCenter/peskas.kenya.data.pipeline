---
title: "High-Resolution Vessel Monitoring of Small-Scale Fisheries in Kenya"
subtitle: "Spatial and Temporal Characterization Using Pelagic Data Systems for Sustainable Management"
author: "Japhet Kaadzo Tembo, Emmanuel Mbaru, Lorenzo Longobardi, Hamza Altarturi, Alexander Tilley"
date: today
format:
  html:
    theme: cosmo
    toc: true
    toc-depth: 3
    toc-location: left
    code-fold: true
    code-summary: "Show code"
    smooth-scroll: true
    link-external-newwindow: true
    citations-hover: true
    footnotes-hover: true
    fig-width: 12
    fig-height: 8
    df-print: paged
    embed-resources: true
execute:
  warning: false
  message: false
  echo: false
editor: visual
---

```{css}
.highlight-box {
  background: #e3f2fd;
  border-left: 4px solid #2196f3;
  padding: 1rem;
  margin: 1rem 0;
  border-radius: 0.25rem;
}

.metric-card {
  text-align: center;
  padding: 1.5rem;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border-radius: 0.5rem;
  margin: 0.5rem;
}

.metric-number {
  font-size: 2.5rem;
  font-weight: bold;
  display: block;
}

.metric-label {
  font-size: 0.9rem;
  opacity: 0.9;
}

.key-finding {
  background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
  border-radius: 0.5rem;
  padding: 1.5rem;
  margin: 1rem 0;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.conflict-warning {
  background: #ffebee;
  border-left: 4px solid #f44336;
  padding: 1rem;
  margin: 1rem 0;
  border-radius: 0.25rem;
}
```

## Executive Summary {.highlight-box}

This study presents comprehensive vessel monitoring analysis from Kenya's small-scale fisheries using 150 solar-powered Pelagic Data Systems (PDS) deployed across 28 Beach Management Units in five coastal counties. Analysis of **46,625 high-resolution tracking records** reveals critical patterns: **fishing hotspots** concentrated in specific grid cells, **seasonal trends** in effort distribution, **resource conflict zones** with high vessel overlap, and **vessel activity coefficients** showing fleet utilization patterns. These findings provide essential evidence for marine spatial planning, adaptive management, and inclusive governance within Kenya's Blue Economy framework.

```{r setup}
#| include: false
library(dplyr)
library(ggplot2)
library(lubridate)
library(stringr)
library(DT)
library(knitr)
library(scales)
library(viridis)
library(patchwork)
library(apexcharter)
library(highcharter)
library(tidyr)
library(sf)
library(leaflet)
library(plotly)

# Custom theme
theme_modern <- function() {
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold", margin = margin(b = 20)),
    plot.subtitle = element_text(size = 12, color = "gray60", margin = margin(b = 20)),
    axis.title = element_text(size = 11, face = "bold"),
    axis.text = element_text(size = 10),
    legend.title = element_text(size = 11, face = "bold"),
    legend.text = element_text(size = 10),
    panel.grid.minor = element_blank(),
    plot.background = element_rect(fill = "white", color = NA),
    strip.text = element_text(size = 11, face = "bold")
  )
}

theme_set(theme_modern())
```

```{r data-load}
# Load vessel tracking data
tracks_binned <- arrow::read_parquet("tracks_binned_28-08.parquet")
#tracks_binned <- arrow::read_parquet("inst/reports/pds/tracks_binned_28-08.parquet")


# Process tracking data with all derived variables
tracks_processed <- tracks_binned %>%
  mutate(
    date = as.Date(time),
    hour = hour(time),
    month = month(time, label = TRUE),
    month_num = month(time),
    week = week(time),
    day_of_week = wday(time, label = TRUE),
    speed_knots = speed_m_s * 1.94384,
    range_km = range_meters / 1000,
    # Fishing zones based on distance from shore
    fishing_zone = case_when(
      range_meters < 1000 ~ "Inshore (<1km)",
      range_meters < 3000 ~ "Near-shore (1-3km)",
      range_meters < 5000 ~ "Offshore (3-5km)",
      TRUE ~ "Deep-sea (>5km)"
    ),
    # Speed-based activity classification
    activity = case_when(
      speed_knots < 0.5 ~ "Stationary/Drifting",
      speed_knots < 2 ~ "Fishing",
      speed_knots < 4 ~ "Slow Transit",
      TRUE ~ "Fast Transit"
    ),
    # Grid cells for spatial analysis (500m resolution)
    lat_grid = round(lat * 200) / 200,  # ~500m resolution
    lng_grid = round(lng * 200) / 200
  )

# Calculate trip-level summaries
trip_summary <- tracks_processed %>%
  group_by(boat, trip) %>%
  summarise(
    trip_start = min(time),
    trip_end = max(time),
    duration_hours = as.numeric(difftime(max(time), min(time), units = "hours")),
    n_positions = n(),
    max_range_km = max(range_km, na.rm = TRUE),
    avg_speed_knots = mean(speed_knots, na.rm = TRUE),
    fishing_positions = sum(activity == "Fishing", na.rm = TRUE),
    fishing_time_pct = fishing_positions / n_positions * 100,
    n_grid_cells = n_distinct(paste(lat_grid, lng_grid)),
    trip_date = as.Date(trip_start),
    departure_hour = hour(trip_start),
    .groups = "drop"
  ) %>%
  filter(duration_hours > 0.5) # Remove very short trips

# Calculate key metrics
total_records <- nrow(tracks_processed)
unique_boats <- n_distinct(tracks_processed$boat)
unique_trips <- n_distinct(tracks_processed$trip)
date_range <- range(tracks_processed$date, na.rm = TRUE)
total_monitoring_days <- as.numeric(diff(date_range))
avg_trip_duration <- mean(trip_summary$duration_hours, na.rm = TRUE)
median_trip_duration <- median(trip_summary$duration_hours, na.rm = TRUE)
```

## Fleet Overview & Vessel Activity Coefficient

::::::::: {style="display: flex; flex-wrap: wrap; justify-content: space-around;"}
::: metric-card
[`r format(total_records, big.mark = ",")`]{.metric-number} [Position Records]{.metric-label}
:::

::: metric-card
[`r unique_boats`]{.metric-number} [Vessels Tracked]{.metric-label}
:::

::: metric-card
[`r unique_trips`]{.metric-number} [Fishing Trips]{.metric-label}
:::

::: metric-card
[`r round(avg_trip_duration, 1)`]{.metric-number} [Avg Trip Duration (hrs)]{.metric-label}
:::

::: metric-card
[`r round(unique_trips/unique_boats, 1)`]{.metric-number} [Trips per Vessel]{.metric-label}
:::

::: metric-card
[`r round(unique_trips/total_monitoring_days, 1)`]{.metric-number} [Daily Fleet Activity]{.metric-label}
:::
:::::::::

```{r vessel-activity-coefficient}
# Calculate Vessel Activity Coefficient (VAC)
vac_analysis <- trip_summary %>%
  mutate(
    trip_week = week(trip_date),
    trip_month = month(trip_date)
  ) %>%
  group_by(boat) %>%
  summarise(
    n_trips = n(),
    n_active_weeks = n_distinct(trip_week),
    n_active_months = n_distinct(trip_month),
    total_fishing_hours = sum(duration_hours * fishing_time_pct / 100),
    avg_trip_duration = mean(duration_hours),
    avg_fishing_pct = mean(fishing_time_pct),
    .groups = "drop"
  ) %>%
  mutate(
    # Calculate VAC as trips per active week
    vac = n_trips / n_active_weeks,
    activity_category = case_when(
      vac < 1 ~ "Low Activity (<1 trip/week)",
      vac < 2 ~ "Moderate (1-2 trips/week)",
      vac < 3 ~ "High (2-3 trips/week)",
      TRUE ~ "Very High (>3 trips/week)"
    )
  )

# VAC distribution visualization
highchart() %>%
  hc_add_series(
    data = vac_analysis %>% arrange(desc(vac)) %>% head(30),
    type = "column",
    hcaes(x = reorder(boat, -vac), y = round(vac, 2)),
    name = "Vessel Activity Coefficient",
    color = "#8E44AD"
  ) %>%
  hc_title(text = "Vessel Activity Coefficient (VAC)") %>%
  hc_subtitle(text = "Average trips per week for top 30 vessels") %>%
  hc_xAxis(
    title = list(text = "Vessel ID"),
    labels = list(rotation = -45)
  ) %>%
  hc_yAxis(title = list(text = "Trips per Week")) %>%
  hc_tooltip(pointFormat = "<b>Vessel {point.x}</b><br>VAC: {point.y} trips/week")
```

## Spatial Analysis: Fishing Hotspots & Intensity

```{r fishing-hotspots}
# Calculate fishing hotspots using grid-based analysis
fishing_hotspots <- tracks_processed %>%
  filter(activity == "Fishing") %>%
  group_by(lat_grid, lng_grid) %>%
  summarise(
    fishing_hours = n() * 5 / 60,  # Each record is 5 minutes
    unique_vessels = n_distinct(boat),
    unique_trips = n_distinct(trip),
    avg_speed = mean(speed_knots, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(
    # Calculate fishing intensity score
    intensity_score = fishing_hours * sqrt(unique_vessels),
    hotspot_category = case_when(
      intensity_score > quantile(intensity_score, 0.95) ~ "Critical Hotspot",
      intensity_score > quantile(intensity_score, 0.85) ~ "Major Hotspot",
      intensity_score > quantile(intensity_score, 0.70) ~ "Moderate Hotspot",
      TRUE ~ "Regular Activity"
    )
  )

# Identify top hotspots
top_hotspots <- fishing_hotspots %>%
  filter(hotspot_category %in% c("Critical Hotspot", "Major Hotspot")) %>%
  arrange(desc(intensity_score))

# Create comprehensive hotspot map
pal_hotspot <- colorNumeric(
  palette = c("#FFFFD9", "#EDF8B1", "#C7E9B4", "#7FCDBB", 
              "#41B6C4", "#1D91C0", "#225EA8", "#081D58"),
  domain = log10(fishing_hotspots$fishing_hours + 1)
)

leaflet(fishing_hotspots, height = "700px") %>%
  addProviderTiles(providers$Esri.OceanBasemap) %>%
  setView(lng = mean(range(tracks_processed$lng, na.rm = TRUE)), 
          lat = mean(range(tracks_processed$lat, na.rm = TRUE)), 
          zoom = 8) %>%
  addRectangles(
    lng1 = ~lng_grid - 0.0025,
    lat1 = ~lat_grid - 0.0025,
    lng2 = ~lng_grid + 0.0025,
    lat2 = ~lat_grid + 0.0025,
    fillColor = ~pal_hotspot(log10(fishing_hours + 1)),
    fillOpacity = 0.7,
    weight = 0.5,
    color = "white",
    popup = ~paste(
      "<b>Grid Cell:</b>", round(lat_grid, 3), ",", round(lng_grid, 3), "<br>",
      "<b>Category:</b>", hotspot_category, "<br>",
      "<b>Fishing Hours:</b>", round(fishing_hours, 1), "<br>",
      "<b>Unique Vessels:</b>", unique_vessels, "<br>",
      "<b>Fishing Trips:</b>", unique_trips, "<br>",
      "<b>Intensity Score:</b>", round(intensity_score, 1)
    ),
    label = ~paste(hotspot_category, "-", round(fishing_hours, 0), "hrs")
  ) %>%
  addCircleMarkers(
    data = top_hotspots,
    lng = ~lng_grid,
    lat = ~lat_grid,
    radius = ~sqrt(intensity_score/10),
    color = "red",
    fillOpacity = 0,
    weight = 2,
    popup = ~paste("<b>TOP HOTSPOT</b><br>",
                  "Fishing Hours:", round(fishing_hours, 0), "<br>",
                  "Vessels:", unique_vessels)
  ) %>%
  addLegend(
    position = "bottomright",
    pal = pal_hotspot,
    values = ~log10(fishing_hours + 1),
    title = "Fishing Intensity<br>(log hours)",
    opacity = 0.8
  ) %>%
  addScaleBar(position = "bottomleft") %>%
  addMeasure(
    position = "topleft",
    primaryLengthUnit = "kilometers"
  ) %>%
  addControl(
    html = "<div style='background: white; padding: 10px; border-radius: 5px; color: black;'>
            <h4>Fishing Hotspot Analysis</h4>
            <p>Red circles indicate critical hotspots</p>
            <p>Grid cells: 500m x 500m resolution</p>
            </div>",
    position = "topright"
  )
```

::: key-finding
### 🎯 **Hotspot Analysis Results**

-   **`r nrow(top_hotspots)`** critical and major hotspots identified
-   Top 5% of areas account for **`r round(sum(top_hotspots$fishing_hours)/sum(fishing_hotspots$fishing_hours)*100, 1)`%** of total fishing effort
-   Maximum concentration: **`r round(max(fishing_hotspots$fishing_hours), 0)` hours** in a single grid cell
-   Average vessels per hotspot: **`r round(mean(top_hotspots$unique_vessels), 1)`**
:::

## Resource Conflict Analysis & Vessel Interactions

```{r conflict-zones}
# Identify resource conflict zones based on simultaneous vessel presence
conflict_analysis <- tracks_processed %>%
  group_by(date, hour, lat_grid, lng_grid) %>%
  summarise(
    n_vessels = n_distinct(boat),
    n_records = n(),
    .groups = "drop"
  ) %>%
  filter(n_vessels > 1)  # Only areas with multiple vessels

# Aggregate conflict intensity
conflict_zones <- conflict_analysis %>%
  group_by(lat_grid, lng_grid) %>%
  summarise(
    conflict_events = n(),
    avg_vessels = mean(n_vessels),
    max_vessels = max(n_vessels),
    total_vessel_hours = sum(n_vessels),
    .groups = "drop"
  ) %>%
  mutate(
    conflict_intensity = case_when(
      avg_vessels > 3 | max_vessels > 5 ~ "High Conflict Risk",
      avg_vessels > 2 | max_vessels > 3 ~ "Moderate Conflict Risk",
      avg_vessels > 1.5 ~ "Low Conflict Risk",
      TRUE ~ "Minimal Risk"
    )
  )


# Create conflict zone map
conflict_colors <- colorFactor(
  palette = c("#4CAF50", "#FF9800", "#F44336"),
  levels = c("Low Conflict Risk", "Moderate Conflict Risk", "High Conflict Risk")
)

leaflet(conflict_zones) %>%
  addProviderTiles(providers$CartoDB.DarkMatter) %>%
  setView(lng = mean(range(tracks_processed$lng, na.rm = TRUE)), 
          lat = mean(range(tracks_processed$lat, na.rm = TRUE)), 
          zoom = 8) %>%
  addCircles(
    lng = ~lng_grid,
    lat = ~lat_grid,
    radius = ~sqrt(total_vessel_hours) * 100,
    fillColor = ~conflict_colors(conflict_intensity),
    fillOpacity = 0.7,
    weight = 1,
    color = "white",
    popup = ~paste(
      "<b>Conflict Zone Analysis</b><br>",
      "<b>Risk Level:</b>", conflict_intensity, "<br>",
      "<b>Location:</b>", round(lat_grid, 3), ",", round(lng_grid, 3), "<br>",
      "<b>Conflict Events:</b>", conflict_events, "<br>",
      "<b>Avg Vessels Present:</b>", round(avg_vessels, 1), "<br>",
      "<b>Max Vessels Observed:</b>", max_vessels, "<br>",
      "<b>Total Vessel-Hours:</b>", total_vessel_hours
    ),
    label = ~as.character(conflict_intensity)  # Fixed: convert to character
  ) %>%
  addLegend(
    position = "bottomright",
    pal = conflict_colors,
    values = conflict_zones$conflict_intensity,  # Fixed: explicit reference
    title = "Conflict Risk Level",
    opacity = 0.8
  ) %>%
  addControl(
    html = "<div style='background: rgba(255,255,255,0.9); padding: 10px; border-radius: 5px; color: black;'>
            <h4>Resource Conflict Zones</h4>
            <p>Areas with multiple vessel overlap</p>
            <p>Size = Total vessel-hours</p>
            </div>",
    position = "topright"
  )

# Temporal pattern of conflicts
conflict_temporal <- conflict_analysis %>%
  group_by(date) %>%
  summarise(
    daily_conflicts = n(),
    vessels_involved = sum(n_vessels),
    .groups = "drop"
  )

highchart() %>%
  hc_add_series(
    data = conflict_temporal,
    type = "line",
    hcaes(x = date, y = daily_conflicts),
    name = "Conflict Events",
    color = "#F44336"
  ) %>%
  hc_title(text = "Temporal Pattern of Resource Conflicts") %>%
  hc_subtitle(text = "Daily occurrence of multi-vessel overlap events") %>%
  hc_xAxis(type = "datetime", title = list(text = "Date")) %>%
  hc_yAxis(title = list(text = "Number of Conflict Events"))
```

::: conflict-warning
### ⚠️ **Resource Conflict Analysis**

-   **`r round(sum(conflict_zones$conflict_events))`** total conflict events recorded
-   Maximum **`r max(conflict_zones$max_vessels)`** vessels observed in single grid cell
-   **`r round(mean(conflict_zones$avg_vessels[conflict_zones$conflict_intensity == "High Conflict Risk"]), 1)`** average vessels in high-risk zones
:::

## Seasonal Trends & Temporal Patterns

```{r seasonal-analysis}
# Monthly fishing effort analysis
monthly_effort <- tracks_processed %>%
  filter(activity == "Fishing") %>%
  group_by(month, month_num) %>%
  summarise(
    fishing_hours = n() * 5 / 60,
    unique_vessels = n_distinct(boat),
    unique_trips = n_distinct(trip),
    avg_range = mean(range_km, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(month_num)

# Create seasonal trend visualization
highchart() %>%
  hc_add_series(
    data = monthly_effort,
    type = "column",
    hcaes(x = month, y = fishing_hours),
    name = "Fishing Hours",
    color = "#2E86AB"
  ) %>%
hc_add_series(
  data = monthly_effort,
  type = "line",
  hcaes(x = month, y = unique_vessels),
  name = "Active Vessels",
  yAxis = 1,        # uses the right-hand axis
  color = "#A23B72"
) |> 
  hc_title(text = "Seasonal Fishing Patterns") %>%
  hc_subtitle(text = "Monthly variation in fishing effort and fleet activity") %>%
  hc_xAxis(categories = monthly_effort$month, title = list(text = "Month")) %>%
  hc_yAxis_multiples(
    list(title = list(text = "Fishing Hours")),
    list(title = list(text = "Active Vessels"), opposite = TRUE)
  ) %>%
  hc_tooltip(shared = TRUE)

# Daily activity patterns
hourly_patterns <- trip_summary %>%
  group_by(departure_hour) %>%
  summarise(
    n_trips = n(),
    avg_duration = mean(duration_hours),
    avg_range = mean(max_range_km),
    .groups = "drop"
  )

apex(
  data = hourly_patterns,
  type = "area",
  mapping = aes(x = departure_hour, y = n_trips)
) %>%
  ax_title(text = "Daily Departure Patterns") %>%
  ax_subtitle(text = "Trip initiation times showing early morning preference") %>%
  ax_colors("#3A86C7") %>%
  ax_fill(type = "gradient") %>%
  ax_xaxis(
    title = list(text = "Hour of Day"),
    min = 0,
    max = 23
  ) %>%
  ax_yaxis(title = list(text = "Number of Trips"))
```

## Trip Characteristics & Gear Usage Patterns

```{r trip-gear-analysis}
# Trip duration categories for gear type inference
trip_patterns <- trip_summary %>%
  mutate(
    duration_category = case_when(
      duration_hours < 3 ~ "Short (<3h)",
      duration_hours < 6 ~ "Half Day (3-6h)",
      duration_hours < 12 ~ "Full Day (6-12h)",
      duration_hours < 24 ~ "Extended (12-24h)",
      TRUE ~ "Multi-Day (>24h)"
    ),
    range_category = case_when(
      max_range_km < 2 ~ "Very Near Shore",
      max_range_km < 5 ~ "Near Shore",
      max_range_km < 10 ~ "Moderate Range",
      TRUE ~ "Long Range"
    ),
    # Inferred gear type based on patterns
    likely_gear = case_when(
      duration_hours < 3 & max_range_km < 2 ~ "Traps/Nets (Short)",
      duration_hours < 6 & fishing_time_pct > 60 ~ "Handline",
      duration_hours > 6 & max_range_km > 5 ~ "Trolling/Longline",
      fishing_time_pct < 30 ~ "Ring Net/Seine",
      TRUE ~ "Mixed Gear"
    )
  )

# Gear usage distribution
gear_summary <- trip_patterns %>%
  count(likely_gear) %>%
  mutate(percentage = n / sum(n) * 100)

highchart() %>%
  hc_add_series(
    data = gear_summary,
    type = "pie",
    hcaes(x = likely_gear, y = percentage),
    name = "Percentage"
  ) %>%
  hc_title(text = "Inferred Gear Usage Distribution") %>%
  hc_subtitle(text = "Based on trip duration and movement patterns") %>%
  hc_tooltip(pointFormat = "<b>{point.name}</b>: {point.y:.1f}%") %>%
  hc_colors(c("#E74C3C", "#3498DB", "#2ECC71", "#F39C12", "#9B59B6"))

# Trip characteristics matrix
trip_matrix <- trip_patterns %>%
  count(duration_category, range_category) %>%
  pivot_wider(names_from = range_category, values_from = n, values_fill = 0)

# Convert to matrix for heatmap
matrix_data <- as.matrix(trip_matrix[,-1])
rownames(matrix_data) <- trip_matrix$duration_category

heatmaply::heatmaply(
  matrix_data,
  xlab = "Range Category",
  ylab = "Duration Category",
  main = "Trip Characteristics Matrix",
  colors = c("#FFFFD9", "#EDF8B1", "#C7E9B4", "#7FCDBB", 
              "#41B6C4", "#1D91C0", "#225EA8", "#081D58"),
  dendrogram = "none",
  showscale = TRUE,
  label_names = c("Duration", "Range", "Count")
)
```

## Vessel Movement Patterns & Speed Analysis

```{r movement-patterns}
# Speed distribution by activity and zone
speed_analysis <- tracks_processed %>%
  filter(speed_knots < 15) %>%  # Remove outliers
  group_by(activity, fishing_zone) %>%
  summarise(
    mean_speed = mean(speed_knots, na.rm = TRUE),
    median_speed = median(speed_knots, na.rm = TRUE),
    sd_speed = sd(speed_knots, na.rm = TRUE),
    n_records = n(),
    .groups = "drop"
  )

# Create comprehensive speed visualization
plot_ly(
  data = tracks_processed %>% filter(speed_knots < 15) %>% sample_n(min(5000, n())),
  x = ~fishing_zone,
  y = ~speed_knots,
  color = ~activity,
  type = "box",
  colors = c("#3498DB", "#E74C3C", "#F39C12", "#9B59B6")
) %>%
  layout(
    title = "Speed Distribution by Zone and Activity",
    xaxis = list(title = "Fishing Zone"),
    yaxis = list(title = "Speed (knots)"),
    boxmode = "group",
    legend = list(orientation = "h", x = 0, y = -0.15)
  )
```
